{
  "Repository class template": {
    "prefix": "nrepo",
    "body": [
      "import {",
      "  PrismaExtendedClient,",
      "  PrismaService,",
      "} from '@lib/shared/prisma/prisma.service';",
      "import { DataWithOptionalID } from '@lib/shared/utils/repository.util';",
      "import { Injectable } from '@nestjs/common';",
      "import { Prisma } from '@prisma/client';",
      "import { DefaultArgs } from '@prisma/client/runtime/library';",
      "",
      "const fields = {",
      "  ID: true,",
      "  $1: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "} satisfies Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select;",
      "",
      "type SelectDefaultArgs = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select<DefaultArgs>;",
      "type CustomReturnType<T> = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{ select: T }>",
      "",
      "@Injectable()",
      "export class ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Repository {",
      "",
      "  get fields() {",
      "    return {",
      "      public: {",
      "        ID: true,",
      "        createdAt: true,",
      "        updatedAt: true,",
      "      }",
      "    }",
      "  }",
      "",
      "  constructor(private readonly prisma: PrismaService) {}",

      "  aggregate(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}AggregateArgs,",
      "    connection: PrismaExtendedClient = this.prisma.read",
      "  ) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.aggregate(params);",
      "  }",
      "",
      "  upsert<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpsertArgs,",
      "    connection: PrismaExtendedClient = this.prisma.write,",
      "  ): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.upsert(params) as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  create<T extends SelectDefaultArgs>(",
      "    params: Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs, 'data'> & {",
      "      data?: DataWithOptionalID<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateInput>",
      "      select: T;",
      "    },",
      "    connection: PrismaExtendedClient = this.prisma.write",
      "  ): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.create(params) as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  createMany<T extends SelectDefaultArgs>(",
      "    params: Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs, 'data'> & {",
      "      data?: Array<DataWithOptionalID<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateInput>>",
      "    },",
      "    connection: PrismaExtendedClient = this.prisma.write",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.createMany(params) as Promise<Array<CustomReturnType<T>>>;",
      "  }",
      "",
      "  findFirst<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs, connection: PrismaExtendedClient = this.prisma.read): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findFirst(params) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  findMany<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindManyArgs,",
      "    connection: PrismaExtendedClient = this.prisma.read",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findMany(params) as unknown as Promise<Array<CustomReturnType<T>>>;",
      "  }",
      "",
      "  count(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CountArgs, connection: PrismaExtendedClient = this.prisma.read) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.count(params);",
      "  }",
      "",
      "  update<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateArgs, connection: PrismaExtendedClient = this.prisma.write): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.update(params) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  updateMany<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateManyArgs,",
      "    connection: PrismaExtendedClient = this.prisma.write",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.updateMany(params) as unknown as Promise<Array<CustomReturnType<T>>>",
      "  }",
      "",
      "  delete(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteArgs, connection: PrismaExtendedClient = this.prisma.write) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.delete(params);",
      "  }",
      "",
      "  deleteMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteManyArgs, connection: PrismaExtendedClient = this.prisma.write) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.deleteMany(params);",
      "  }",
      "}"
    ]
  }
}
