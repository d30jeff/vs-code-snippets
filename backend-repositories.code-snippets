{
  "Repository class template": {
    "prefix": "repo",
    "body": [
      "import { Prisma, ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g} } from '@prisma/client';",
      "import { database } from '@/providers/database.provider.js';",
      "import { Injectable } from '@decorators/di';",
      "",
      "const fields = {",
      "  ID: true,",
      "  $1: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "} satisfies Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select;",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = fields;",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect;",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPublicFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect;",
      "}>;",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = { ...fields } satisfies Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select;",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect;",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPrivateFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect;",
      "}>;",
      "",
      "type CustomReturnType<T extends Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs['select']> =",
      "  T extends ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect",
      "    ? ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPrivateFields",
      "    : T extends ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect",
      "    ? ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPublicFields",
      "    : ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g};",
      "",
      "@Injectable()",
      "export class ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Repository {",
      "  aggregate(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}AggregateArgs,",
      "    connection: Prisma.TransactionClient = database.read",
      "  ) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.aggregate(params);",
      "  }",
      "",
      "  upsert<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpsertArgs,",
      "    connection: Prisma.TransactionClient = database.write,",
      "  ): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.upsert(params) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  create<T>(",
      "    params: Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs, 'data'> & {",
      "      data?: Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateInput, 'ID'> & { ID?: string };",
      "    },",
      "    connection: Prisma.TransactionClient = database.write",
      "  ): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.create(params as Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  createMany<T>(",
      "    params: Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs, 'data'> & {",
      "      data?: Array<Omit<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyInput, 'ID'> & { ID?: string }>;",
      "    },",
      "    connection: Prisma.TransactionClient = database.write",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.createMany(params as Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs) as unknown as Promise<Array<CustomReturnType<T>>>;",
      "  }",
      "",
      "  findFirst<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs, connection: Prisma.TransactionClient = database.read): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findFirst(params) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  findMany<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindManyArgs,",
      "    connection: Prisma.TransactionClient = database.read",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findMany(params) as unknown as Promise<Array<CustomReturnType<T>>>;",
      "  }",
      "",
      "  count(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CountArgs, connection: Prisma.TransactionClient = database.read) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.count(params);",
      "  }",
      "",
      "  update<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateArgs, connection: Prisma.TransactionClient = database.write): Promise<CustomReturnType<T>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.update(params) as unknown as Promise<CustomReturnType<T>>;",
      "  }",
      "",
      "  updateMany<T>(",
      "    params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateManyArgs,",
      "    connection: Prisma.TransactionClient = database.write",
      "  ): Promise<Array<CustomReturnType<T>>> {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.updateMany(params) as unknown as Promise<Array<CustomReturnType<T>>>",
      "  }",
      "",
      "  delete(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteArgs, connection: Prisma.TransactionClient = database.write) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.delete(params);",
      "  }",
      "",
      "  deleteMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteManyArgs, connection: Prisma.TransactionClient = database.write) {",
      "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.deleteMany(params);",
      "  }",
      "}"
    ]
  }
}
