{
  "Repository class template": {
    "prefix": "repo",
    "body": [
      "import { Prisma, ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g} } from '@prisma/client';",
      "import { GetResult } from '@prisma/client/runtime/library';",
      "import { database } from '@providers/database.provider';",
      "",
      "const fields = {",
      "  ID: true,",
      "  $1: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "} satisfies Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select;",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = fields",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPublicFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect;",
      "}>;",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = { ...fields } satisfies Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select;",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPrivateFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect;",
      "}>;",
      "",
      "type CustomReturnType<T extends Prisma.AccountFindFirstArgs['select']> =",
      "T extends ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect",
      "  ? ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPrivateFields",
      "  : T extends ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect",
      "  ? ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPublicFields",
      "  : ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g};",
      "",
      "export class ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Repository {",
        "  aggregate(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}AggregateArgs, connection: Prisma.TransactionClient = database.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.aggregate(params);",
        "  }",
        "",
        "  upsert<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpsertArgs, connection: Prisma.TransactionClient = database.write): Promise<GetResult<CustomReturnType<T>, null>> {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.upsert(params) as unknown as Promise<GetResult<CustomReturnType<T>, null>>;",
        "  }",
        "",
        "  create<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs, connection: Prisma.TransactionClient = database.write): Promise<GetResult<CustomReturnType<T>, null>> {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.create(params) as unknown as Promise<GetResult<CustomReturnType<T>, null>>;",
        "  }",
        "",
        "  createMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs, connection: Prisma.TransactionClient = database.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.createMany(params);",
        "  }",
        "",
        "  findFirst<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs, connection: Prisma.TransactionClient = database.read): Promise<GetResult<CustomReturnType<T>, null>> {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findFirst(params) as unknown as Promise<GetResult<CustomReturnType<T>, null>>;",
        "  }",
        "",
        "  findMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindManyArgs, connection: Prisma.TransactionClient = database.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findMany(params);",
        "  }",
        "",
        "  count(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CountArgs, connection: Prisma.TransactionClient = database.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.count(params);",
        "  }",
        "",
        "  update<T>(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateArgs, connection: Prisma.TransactionClient = database.write): Promise<GetResult<CustomReturnType<T>, null>> {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.update(params) as unknown as Promise<GetResult<CustomReturnType<T>, null>>;",
        "  }",
        "",
        "  updateMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateManyArgs, connection: Prisma.TransactionClient = database.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.updateMany(params);",
        "  }",
        "",
        "  delete(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteArgs, connection: Prisma.TransactionClient = database.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.delete(params);",
        "  }",
        "",
        "  deleteMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteManyArgs, connection: Prisma.TransactionClient = database.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.deleteMany(params);",
        "  }",
      "}",
    ]
  }
}
