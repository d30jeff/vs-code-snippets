{
  "Repository class template": {
    "prefix": "repo",
    "body": [
      "import { Prisma } from '@prisma/client';",
      "import { db } from '@providers/db.provider';",
      "",
      "const fields = {",
      "  ID: true,",
      "  $1: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "};",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = Prisma.validator<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select>()(fields);",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPublicFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect;",
      "}>;",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = Prisma.validator<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select>()({",
      "  ...fields,",
      "});",
      "",
      "export type ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}WithPrivateFields = Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}GetPayload<{",
      "  select: typeof ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect;",
      "}>;",
      "",
      "export class ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Repository {",
        "  upsert(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpsertArgs, connection: Prisma.TransactionClient = db.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.upsert(params);",
        "  }",
        "",
        "  create(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs, connection: Prisma.TransactionClient = db.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.create(params);",
        "  }",
        "",
        "  createMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs, connection: Prisma.TransactionClient = db.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.createMany(params);",
        "  }",
        "",
        "  findFirst(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs, connection: Prisma.TransactionClient = db.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findFirst(params);",
        "  }",
        "",
        "  findMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindManyArgs, connection: Prisma.TransactionClient = db.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findMany(params);",
        "  }",
        "",
        "  count(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CountArgs, connection: Prisma.TransactionClient = db.read) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.count(params);",
        "  }",
        "",
        "  update(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateArgs, connection: Prisma.TransactionClient = db.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.update(params);",
        "  }",
        "",
        "  delete(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteArgs, connection: Prisma.TransactionClient = db.write) {",
        "    return connection.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.delete(params);",
        "  }",
      "}",
    ]
  }
}
