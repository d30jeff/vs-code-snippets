{
  "Repository class template": {
    "prefix": "repo",
    "body": [
      "import { Prisma } from '@prisma/client';",
      "import { db } from '@providers/db.provider';",
      "",
      "const fields = {",
      "  ID: true,",
      "  $1: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "};",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PublicSelect = Prisma.validator<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select>()(fields);",
      "",
      "export const ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}PrivateSelect = Prisma.validator<Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Select>()({",
      "  ...fields,",
      "});",
      "",
      "export class ${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}Repository {",
        "  upsert(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpsertArgs) {",
        "    return db.write.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.upsert(params);",
        "  }",
        "",
        "  create(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateArgs) {",
        "    return db.write.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.create(params);",
        "  }",
        "",
        "  createMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CreateManyArgs) {",
        "    return db.write.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.createMany(params);",
        "  }",
        "",
        "  findFirst(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindFirstArgs) {",
        "    return db.read.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findFirst(params);",
        "  }",
        "",
        "  findMany(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}FindManyArgs) {",
        "    return db.read.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.findMany(params);",
        "  }",
        "",
        "  count(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}CountArgs) {",
        "    return db.read.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.count(params);",
        "  }",
        "",
        "  update(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}UpdateArgs) {",
        "    return db.write.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.update(params);",
        "  }",
        "",
        "  delete(params: Prisma.${TM_FILENAME/(.*).repository.ts/${1:/pascalcase}/g}DeleteArgs) {",
        "    return db.write.${TM_FILENAME/(.*).repository.ts/${1:/camelcase}/g}.delete(params);",
        "  }",
      "}",
    ]
  }
}
