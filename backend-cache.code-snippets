{
  "Backend Cache": {
    "scope": "typescript",
    "prefix": "backend:cache",
    "body": [
      "import { Injectable } from '@decorators/di';",
      "import { Middleware } from '@decorators/express';",
      "",
      "import { HttpStatus } from '@/core/enums/http-status.enum.js';",
      "import { RedisService } from '@/core/services/redis/redis.service.js';",
      "import { type CustomLogger, Logger } from '@/core/utils/logger.util.js';",
      "import { RequestUtil } from '@/core/utils/request.util.js';",
      "import {",
      "  ExpressNextFunction,",
      "  ExpressRequest,",
      "  ExpressResponse,",
      "} from '@/interfaces/express.interface.js';",
      "",
      "@Injectable()",
      "export class ${TM_FILENAME/(.*).cache.ts/${1:/pascalcase}/g}Cacheodule implements Middleware {",
      "  @Logger()",
      "  private readonly logger: CustomLogger;",
      "  constructor(private readonly redisService: RedisService) { }",
      "",
      "  async use(request: ExpressRequest, response: ExpressResponse, next: ExpressNextFunction) {",
      "    const modifiedDate = RequestUtil.GetLastModifiedHeader(request);",
      "",
      "    if (!modifiedDate) {",
      "      this.logger.info('Modified header not found');",
      "      return next();",
      "    } else {",
      "      const { ID } = request.params;",
      "",
      "      const lastModified = await this.redisService.get({",
      "        ID: '',",
      "        type: '',",
      "      });",
      "",
      "      const isNotModified = modifiedDate.isSame(lastModified, 'seconds');",
      "",
      "      if (isNotModified) {",
      "        return response.sendStatus(HttpStatus.NotModified);",
      "      }",
      "",
      "      next();",
      "    }",
      "  }",
      "}",
    ]
  }
}
