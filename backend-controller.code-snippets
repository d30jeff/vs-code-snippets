{
  "Controller class template": {
    "prefix": "controller",
    "body": [
      "import { serializePaginationParams } from '@/utils/pagination.util.js';",
      "import {",
      "  ExpressNextFunction,",
      "  ExpressRequest,",
      "  ExpressResponse,",
      "} from '@/interfaces/express.interface.js';",
      "import {",
      "  Controller,",
      "  Delete,",
      "  Get,",
      "  Next,",
      "  Params,",
      "  Post,",
      "  Put,",
      "  Request,",
      "  Response,",
      "} from '@decorators/express';",
      "import { CustomLogger, Logger } from '@/providers/logger.provider.js';",
      "import { validate } from '@/utils/class-validator.util.js';",
      "import { HttpStatus } from '@/enums/http-status.enum.js';",
      "",
      "@Controller('/$1')",
      "export class ${TM_FILENAME/(.*).controller.ts/${1:/pascalcase}/g}Controller {",
      "  @Logger()",
      "  private readonly logger: CustomLogger;",
      "",
      "  @Post('/')",
      "  async create(",
      "    @Request() request: ExpressRequest,",
      "    @Response() response: ExpressResponse,",
      "    @Next() next: ExpressNextFunction",
      "  ) {",
      "    try {",
      "      return response.status(HttpStatus.Created).json({});",
      "    } catch (error) {",
      "      this.logger.fatal(error);",
      "      next(error);",
      "    }",
      "  }",
      "",
      "  @Get('/')",
      "  async list(",
      "    @Request() request: ExpressRequest,",
      "    @Response() response: ExpressResponse,",
      "    @Next() next: ExpressNextFunction",
      "  ) {",
      "    try {",
      "      const { page, limit } = serializePaginationParams(request);",
      "      return response.status(HttpStatus.Ok).json({});",
      "    } catch (error) {",
      "      this.logger.fatal(error);",
      "      next(error);",
      "    }",
      "  }",
      "",
      "  @Get('/:ID')",
      "  async get(",
      "    @Params('ID') ID: string,",
      "    @Request() request: ExpressRequest,",
      "    @Response() response: ExpressResponse,",
      "    @Next() next: ExpressNextFunction",
      "  ) {",
      "    try {",
      "      return response.status(HttpStatus.Ok).json({});",
      "    } catch (error) {",
      "      this.logger.fatal(error);",
      "      next(error);",
      "    }",
      "  }",
      "",
      "  @Put('/:ID')",
      "  async update(",
      "    @Params('ID') ID: string,",
      "    @Request() request: ExpressRequest,",
      "    @Response() response: ExpressResponse,",
      "    @Next() next: ExpressNextFunction",
      "  ) {",
      "    try {",
      "      return response.status(HttpStatus.Ok).json({});",
      "    } catch (error) {",
      "      this.logger.fatal(error);",
      "      next(error);",
      "    }",
      "  }",
      "",
      "  @Delete('/:ID')",
      "  async delete(",
      "    @Params('ID') ID: string,",
      "    @Request() request: ExpressRequest,",
      "    @Response() response: ExpressResponse,",
      "    @Next() next: ExpressNextFunction",
      "  ) {",
      "    try {",
      "      return response.sendStatus(HttpStatus.NoContent);",
      "    } catch (error) {",
      "      this.logger.fatal(error);",
      "      next(error);",
      "    }",
      "  }",
      "}",
    ]
  }
}
